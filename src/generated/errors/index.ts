/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * BuildingNotFound: 'House not found in town'
 *
 * @category Errors
 * @category generated
 */
export class BuildingNotFoundError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'BuildingNotFound'
  constructor() {
    super('House not found in town')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BuildingNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new BuildingNotFoundError())
createErrorFromNameLookup.set(
  'BuildingNotFound',
  () => new BuildingNotFoundError()
)

/**
 * InsufficientVaultSol: 'Not enough sol in vault'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientVaultSolError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InsufficientVaultSol'
  constructor() {
    super('Not enough sol in vault')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientVaultSolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InsufficientVaultSolError())
createErrorFromNameLookup.set(
  'InsufficientVaultSol',
  () => new InsufficientVaultSolError()
)

/**
 * InsufficientRentVault: 'Not enough tokens to pay rent'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientRentVaultError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InsufficientRentVault'
  constructor() {
    super('Not enough tokens to pay rent')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientRentVaultError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InsufficientRentVaultError())
createErrorFromNameLookup.set(
  'InsufficientRentVault',
  () => new InsufficientRentVaultError()
)

/**
 * UnauthorizedSigner: 'Asset not owned by signer'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedSignerError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'UnauthorizedSigner'
  constructor() {
    super('Asset not owned by signer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new UnauthorizedSignerError())
createErrorFromNameLookup.set(
  'UnauthorizedSigner',
  () => new UnauthorizedSignerError()
)

/**
 * InsufficientVaultAsset: 'Asset not present in vault'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientVaultAssetError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InsufficientVaultAsset'
  constructor() {
    super('Asset not present in vault')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientVaultAssetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InsufficientVaultAssetError())
createErrorFromNameLookup.set(
  'InsufficientVaultAsset',
  () => new InsufficientVaultAssetError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
