/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FundRentVault
 * @category generated
 */
export type FundRentVaultInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category FundRentVault
 * @category generated
 */
export const fundRentVaultStruct = new beet.BeetArgsStruct<
  FundRentVaultInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'FundRentVaultInstructionArgs'
)
/**
 * Accounts required by the _fundRentVault_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] userTokenAccount
 * @property [_writable_] rentVault
 * @property [] tokenMint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category FundRentVault
 * @category generated
 */
export type FundRentVaultInstructionAccounts = {
  signer: web3.PublicKey
  userTokenAccount: web3.PublicKey
  rentVault: web3.PublicKey
  tokenMint: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const fundRentVaultInstructionDiscriminator = [
  244, 253, 189, 13, 179, 95, 31, 3,
]

/**
 * Creates a _FundRentVault_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category FundRentVault
 * @category generated
 */
export function createFundRentVaultInstruction(
  accounts: FundRentVaultInstructionAccounts,
  args: FundRentVaultInstructionArgs,
  programId = new web3.PublicKey('CgGCmVn7W9zjKjAqw3ypEQfEEiJGSM1u87AzyEC81m5b')
) {
  const [data] = fundRentVaultStruct.serialize({
    instructionDiscriminator: fundRentVaultInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.userTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rentVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
